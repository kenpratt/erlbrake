h1. erlbrake

An Erlang client for the "Airbrake":http://airbrake.io/ exception notification service (formerly known as Hoptoad).

h2. Requirements

* "ibrowse":http://github.com/cmullaparthi/ibrowse for HTTP requests

h2. Usage

1. Sign up for "Airbrake":http://airbrake.io/
2. Create a Airbrake project, and copy the API key
3. Proceed with "Running the Erlbrake application" or "Embedding Erlbrake in an existing application"

h3. Running the Erlbrake application

1. Compile erlbrake: @cd path/to/erlbrake/ && make@ or @rebar compile@
2. Start the erlbrake application, replacing the API key with your own and the paths to ibrowse and erlbrake to where they are installed on your machine:

<pre><code>ERL_LIBS="$HOME/erlang/ibrowse:$HOME/erlang/erlbrake:$ERL_LIBS" erl -erlbrake api_key '"76fdb93ab2cf276ec080671a8b3d3866"' -erlbrake error_logger true -erlbrake environment '"development"' -s erlbrake start</code></pre>

3. Try generating a couple of error reports:

<pre><code>1> airbrake:notify(error, fake, "Testing erlbrake with a manual error report", no_module, 0).
ok
2> error_logger:error_msg("A sample error caught by the erlbrake error logger.").
...</code></pre>

4. Configure erlbrake: three configuration options are supported: @api_key@, @environment@, and @error_logger@

* @api_key@ - Set this to the API key of your Airbrake project (String).
* @environment@ - The Airbrake environment that errors will be reported under (String).
* @error_logger@ - Set to @true@ to enable the erlbrake error_logger (Boolean). The erlbrake error logger will intergrate with the existing Erlang/OTP error logging, notifying airbrake of any runtime errors in your application. The upside is that it can catch things that manual airbrake notification can't.

These configuration options can be set in @ebin/erlbrake.app@, or configured on the command line as in the above example.

h3. Embedding Erlbrake in an existing application

1. Add airbrake to your application supervision tree:

<pre><code>{airbrake,
    {airbrake, start_link, ["production", "76fdb93ab2cf276ec080671a8b3d3866"]},
    permanent, 5000, worker, dynamic}.</code></pre>

2. Add airbrake hooks:

<pre><code>case calculate_something() of
    {ok, Value} ->
        Value;
    Error = {error, Reason} ->
        airbrake:notify(error, Reason, "Frobber calculation failed", ?MODULE, ?LINE)
end.</code></pre>

and/or:

<pre><code>try do_stuff() of
    Value ->
        Value
catch
    Type:Reason ->
        airbrake:notify(Type, Reason, "Ahhh! Stuff is not good!", ?MODULE, ?LINE, erlang:get_stacktrace())
end.</code></pre>

3. Compile erlbrake: @cd path/to/erlbrake/ && make@
4. Add the erlbrake ebin directory to your Erlang path: @-pa path/to/erlbrake/ebin@
5. Start ibrowse during your application startup: @application:start(ibrowse)@
6. Test it out!
7. (Optional) Add the erlbrake error logger to your application startup:

<pre><code>error_logger:add_report_handler(erlbrake_error_logger)</code></pre>

h2. Macro

A macro similar to this is likely useful to avoid duplication:

<pre><code>-define(NOTIFY_AIRBRAKE(Type, Reason, Message),
        airbrake:notify(Type, Reason, Message, ?MODULE, ?LINE, erlang:get_stacktrace())).</code></pre>

If you already have a macro to log errors, just add it to that :)
